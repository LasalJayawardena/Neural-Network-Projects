library(keras)
install.packages("keras")
library(keras)
mnist <- suppressMessages(dataset_mnist())
n
library(keras)
mnist <- suppressMessages(dataset_mnist())
c(c(train_images, train_labels), c(test_images, test_labels)) %<-% mnist
digit <- train_images[1,,]
plot(as.raster(digit, max = 255))
train_images = array_reshape(train_images,  c(60000, 28*28))
test_images = array_reshape(test_images, c(10000, 28*28))
train_images <- train_images/225
test_images <- test_images/255
str(train_images)
str(test_images)
train_labels <- to_categorical(train_labels)
test_labels<- to_categorical(test_labels)
network  <- keras_model_sequential()%>%
# 512 neurons always to the power of 2
layer_dense(units=512, activation = "relu",
input_shape = 28*28) %>%
layer_dense(units=10, activation = "softmax")
summary(network)
digit <- train_images[1,,]
library(keras)
mnist <- suppressMessages(dataset_mnist())
c(c(train_images, train_labels), c(test_images, test_labels)) %<-% mnist
digit <- train_images[1,,]
plot(as.raster(digit, max = 255))
train_images = array_reshape(train_images,  c(60000, 28*28))
test_images = array_reshape(test_images, c(10000, 28*28))
train_images <- train_images/225
test_images <- test_images/255
str(train_images)
str(test_images)
train_labels <- to_categorical(train_labels)
test_labels<- to_categorical(test_labels)
network  <- keras_model_sequential()%>%
# 512 neurons always to the power of 2
layer_dense(units=512, activation = "relu",
input_shape = 28*28) %>%
layer_dense(units=10, activation = "softmax")
summary(network)
network%>%
compile(
optimizer = "rmsprop",
loss = "categorical_crossentropy",
metric =c("accuracy")
)
history <- network%>%
fit(train_images, train_labels, epochs=5, batch_Size=128)
network%>%
evaluate(test_images,test_labels)
predictions<- network%>%
predict_classes(test_images)
actual<- mnist$test$y
sum(predictions != actual)
